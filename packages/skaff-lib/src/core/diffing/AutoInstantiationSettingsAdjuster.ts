import {
  AutoInstantiatedSubtemplate,
  FinalTemplateSettings,
  ProjectSettings,
  UserTemplateSettings,
} from "@timonteutelink/template-types-lib";
import crypto from "node:crypto";

import { backendLogger } from "../../lib/logger";
import { Result } from "../../lib/types";
import { anyOrCallbackToAny } from "../../lib/utils";
import { Project } from "../../models/project";
import { Template } from "../../models/template";
import { getRootTemplateRepository } from "../../repositories";
import { latestMigrationUuid } from "../../services/template-migration-service";

export class AutoInstantiationSettingsAdjuster {
  public async modifyAutoInstantiatedTemplates(
    projectSettings: ProjectSettings,
    currentTemplate: Template,
    templateInstanceId: string,
    templateParentInstanceId: string | undefined,
    templateUserSettings: UserTemplateSettings,
  ): Promise<Result<ProjectSettings>> {
    const newFullTemplateSettings = Project.getFinalTemplateSettings(
      currentTemplate,
      projectSettings,
      templateUserSettings,
      templateParentInstanceId,
    );
    if ("error" in newFullTemplateSettings) {
      return newFullTemplateSettings;
    }

    const templatesToAutoInstantiate = anyOrCallbackToAny(
      currentTemplate.config.autoInstantiatedSubtemplates,
      newFullTemplateSettings.data,
    );

    if ("error" in templatesToAutoInstantiate) {
      return templatesToAutoInstantiate;
    }

    if (!templatesToAutoInstantiate.data) {
      return { data: projectSettings };
    }

    return this.recursivelyModifyAutoInstantiatedTemplates(
      templatesToAutoInstantiate.data,
      projectSettings,
      currentTemplate,
      templateInstanceId,
      newFullTemplateSettings.data,
    );
  }

  private async recursivelyModifyAutoInstantiatedTemplates(
    templatesToAutoInstantiate: AutoInstantiatedSubtemplate[],
    projectSettings: ProjectSettings,
    currentTemplateToAddChildren: Template,
    currentTemplateInstanceId: string,
    currentTemplateFinalSettings: FinalTemplateSettings,
  ): Promise<Result<ProjectSettings>> {
    for (const autoInstantiatedTemplate of templatesToAutoInstantiate || []) {
      const existingTemplateIndex =
        projectSettings.instantiatedTemplates.findIndex(
          (template) =>
            template.templateName ===
              autoInstantiatedTemplate.subTemplateName &&
            template.parentId === currentTemplateInstanceId &&
            template.automaticallyInstantiatedByParent,
        );

      if (existingTemplateIndex === -1) {
        backendLogger.error(
          `Auto instantiated template ${autoInstantiatedTemplate.subTemplateName} not found`,
        );
        return {
          error: `Auto instantiated template ${autoInstantiatedTemplate.subTemplateName} not found`,
        };
      }

      const existingTemplate =
        projectSettings.instantiatedTemplates[existingTemplateIndex]!;

      const autoGeneratedTemplateUserSettings = anyOrCallbackToAny(
        autoInstantiatedTemplate.mapSettings,
        currentTemplateFinalSettings,
      );

      if ("error" in autoGeneratedTemplateUserSettings) {
        return autoGeneratedTemplateUserSettings;
      }

      const subTemplateName = autoInstantiatedTemplate.subTemplateName;

      if (!projectSettings.instantiatedTemplates[existingTemplateIndex]) {
        backendLogger.error(
          `Instantiated template ${autoInstantiatedTemplate.subTemplateName} not found in project settings`,
        );
        return { error: "Instantiated template not found in project settings" };
      }

      const subTemplate =
        currentTemplateToAddChildren.findSubTemplate(subTemplateName);

      if (!subTemplate) {
        backendLogger.error(
          `Subtemplate ${autoInstantiatedTemplate.subTemplateName} not found`,
        );
        return {
          error: `Subtemplate ${autoInstantiatedTemplate.subTemplateName} not found`,
        };
      }

      const childFinalTemplateSettings = Project.getFinalTemplateSettings(
        subTemplate,
        projectSettings,
        autoGeneratedTemplateUserSettings.data,
        currentTemplateInstanceId,
      );

      if ("error" in childFinalTemplateSettings) {
        return childFinalTemplateSettings;
      }

      if (
        !subTemplate.parentTemplate ||
        subTemplate.parentTemplate.config.templateConfig.name !==
          currentTemplateToAddChildren.config.templateConfig.name
      ) {
        backendLogger.error(
          `Subtemplate ${autoInstantiatedTemplate.subTemplateName} is not a child of template ${currentTemplateToAddChildren.config.templateConfig.name}`,
        );
        return {
          error: `Subtemplate ${autoInstantiatedTemplate.subTemplateName} is not a child of template ${currentTemplateToAddChildren.config.templateConfig.name}`,
        };
      }

      projectSettings.instantiatedTemplates[existingTemplateIndex] = {
        ...projectSettings.instantiatedTemplates[existingTemplateIndex],
        templateName: subTemplateName,
        templateSettings: autoGeneratedTemplateUserSettings.data,
      };

      const childTemplatesToAutoInstantiate =
        autoInstantiatedTemplate.children;

      if (childTemplatesToAutoInstantiate) {
        const result = await this.recursivelyModifyAutoInstantiatedTemplates(
          childTemplatesToAutoInstantiate,
          projectSettings,
          subTemplate,
          existingTemplate.id,
          childFinalTemplateSettings.data,
        );

        if ("error" in result) {
          return result;
        }

        projectSettings = result.data;
      }

      const newTemplatesToAutoInstantiate = anyOrCallbackToAny(
        subTemplate.config.autoInstantiatedSubtemplates,
        childFinalTemplateSettings.data,
      );

      if ("error" in newTemplatesToAutoInstantiate) {
        return newTemplatesToAutoInstantiate;
      }

      if (newTemplatesToAutoInstantiate.data) {
        const result = await this.recursivelyModifyAutoInstantiatedTemplates(
          newTemplatesToAutoInstantiate.data,
          projectSettings,
          subTemplate,
          existingTemplate.id,
          childFinalTemplateSettings.data,
        );

        if ("error" in result) {
          return result;
        }

        projectSettings = result.data;
      }
    }

    return { data: projectSettings };
  }

  public async addAutoInstantiatedTemplates(
    projectSettings: ProjectSettings,
    template: Template,
    templateInstanceId: string,
    templateParentInstanceId: string | undefined,
    templateUserSettings: UserTemplateSettings,
  ): Promise<Result<ProjectSettings>> {
    const newFullTemplateSettings = Project.getFinalTemplateSettings(
      template,
      projectSettings,
      templateUserSettings,
      templateParentInstanceId,
    );
    if ("error" in newFullTemplateSettings) {
      return newFullTemplateSettings;
    }

    const templatesToAutoInstantiate = anyOrCallbackToAny(
      template.config.autoInstantiatedSubtemplates,
      newFullTemplateSettings.data,
    );
    if ("error" in templatesToAutoInstantiate) {
      return templatesToAutoInstantiate;
    }
    if (!templatesToAutoInstantiate.data) {
      return { data: projectSettings };
    }

    return this.recursivelyAddAutoInstantiatedTemplates(
      templatesToAutoInstantiate.data,
      projectSettings,
      template,
      templateInstanceId,
      newFullTemplateSettings.data,
    );
  }

  private async recursivelyAddAutoInstantiatedTemplates(
    templatesToAutoInstantiate: AutoInstantiatedSubtemplate[],
    projectSettings: ProjectSettings,
    currentTemplateToAddChildren: Template,
    currentTemplateInstanceId: string,
    finalParentTemplateSettings: FinalTemplateSettings,
  ): Promise<Result<ProjectSettings>> {
    const rootTemplateRepository = await getRootTemplateRepository();
    for (const autoInstantiatedTemplate of templatesToAutoInstantiate || []) {
      const autoInstantiatedTemplateInstanceId = crypto.randomUUID();
      const newTemplateSettings = anyOrCallbackToAny(
        autoInstantiatedTemplate.mapSettings,
        finalParentTemplateSettings,
      );
      if ("error" in newTemplateSettings) {
        return newTemplateSettings;
      }
      const subTemplateName = autoInstantiatedTemplate.subTemplateName;

      const rootTemplate = await rootTemplateRepository.loadRevision(
        projectSettings.rootTemplateName,
        currentTemplateToAddChildren.findRootTemplate().commitHash!,
      );

      if ("error" in rootTemplate) {
        return rootTemplate;
      }

      if (!rootTemplate.data) {
        backendLogger.error(
          `Root template not found: ${projectSettings.rootTemplateName}`,
        );
        return {
          error: `Root template not found: ${projectSettings.rootTemplateName}`,
        };
      }

      const subTemplate = rootTemplate.data.findSubTemplate(subTemplateName);

      if (!subTemplate) {
        backendLogger.error(
          `Subtemplate ${autoInstantiatedTemplate.subTemplateName} not found`,
        );
        return {
          error: `Subtemplate ${autoInstantiatedTemplate.subTemplateName} not found`,
        };
      }

      const newFinalTemplateSettings = Project.getFinalTemplateSettings(
        subTemplate,
        projectSettings,
        newTemplateSettings.data,
        currentTemplateInstanceId,
      );

      if ("error" in newFinalTemplateSettings) {
        return newFinalTemplateSettings;
      }

      if (
        !subTemplate.parentTemplate ||
        subTemplate.parentTemplate.config.templateConfig.name !==
          currentTemplateToAddChildren.config.templateConfig.name
      ) {
        backendLogger.error(
          `Subtemplate ${autoInstantiatedTemplate.subTemplateName} is not a child of template ${currentTemplateToAddChildren.config.templateConfig.name}`,
        );
        return {
          error: `Subtemplate ${autoInstantiatedTemplate.subTemplateName} is not a child of template ${currentTemplateToAddChildren.config.templateConfig.name}`,
        };
      }

      const lastMigration = latestMigrationUuid(subTemplate.config.migrations);

      projectSettings.instantiatedTemplates.push({
        id: autoInstantiatedTemplateInstanceId,
        parentId: currentTemplateInstanceId,
        templateCommitHash:
          subTemplate.commitHash ?? currentTemplateToAddChildren.commitHash,
        templateRepoUrl:
          subTemplate.repoUrl ?? currentTemplateToAddChildren.repoUrl,
        templateBranch:
          subTemplate.branch ?? currentTemplateToAddChildren.branch,
        automaticallyInstantiatedByParent: true,
        templateName: subTemplateName,
        templateSettings: newTemplateSettings.data,
        lastMigration,
      });

      const childTemplatesToAutoInstantiate =
        autoInstantiatedTemplate.children;
      if (childTemplatesToAutoInstantiate) {
        const result = await this.recursivelyAddAutoInstantiatedTemplates(
          childTemplatesToAutoInstantiate,
          projectSettings,
          subTemplate,
          autoInstantiatedTemplateInstanceId,
          newFinalTemplateSettings.data,
        );

        if ("error" in result) {
          return result;
        }

        projectSettings = result.data;
      }

      const newTemplatesToAutoInstantiate = anyOrCallbackToAny(
        subTemplate.config.autoInstantiatedSubtemplates,
        newFinalTemplateSettings.data,
      );
      if ("error" in newTemplatesToAutoInstantiate) {
        return newTemplatesToAutoInstantiate;
      }

      if (newTemplatesToAutoInstantiate.data) {
        const result = await this.recursivelyAddAutoInstantiatedTemplates(
          newTemplatesToAutoInstantiate.data,
          projectSettings,
          subTemplate,
          autoInstantiatedTemplateInstanceId,
          newFinalTemplateSettings.data,
        );

        if ("error" in result) {
          return result;
        }

        projectSettings = result.data;
      }
    }
    return { data: projectSettings };
  }
}
